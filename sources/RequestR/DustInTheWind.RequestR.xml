<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DustInTheWind.RequestR</name>
    </assembly>
    <members>
        <member name="T:DustInTheWind.RequestR.AssemblyExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Reflection.Assembly"/> type.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.AssemblyExtensions.GetAllUseCasesAndRequestValidators(System.Reflection.Assembly)">
            <summary>
            Enumerates all the types that implement the one of the interfaces: <see cref="T:DustInTheWind.RequestR.IUseCase`1"/>,
            <see cref="T:DustInTheWind.RequestR.IUseCase`2"/>, <see cref="T:DustInTheWind.RequestR.IUseCaseAsync`1"/>,
            <see cref="T:DustInTheWind.RequestR.IUseCaseAsync`2"/> or <see cref="T:DustInTheWind.RequestR.IRequestValidator`1"/>.
            </summary>
            <param name="assembly">The assembly to be searched.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects representing the use case and request validator classes.</returns>
        </member>
        <member name="M:DustInTheWind.RequestR.AssemblyExtensions.GetAllUseCases(System.Reflection.Assembly)">
            <summary>
            Enumerates all the types that implement the one of the interfaces: <see cref="T:DustInTheWind.RequestR.IUseCase`1"/>,
            <see cref="T:DustInTheWind.RequestR.IUseCase`2"/>, <see cref="T:DustInTheWind.RequestR.IUseCaseAsync`1"/> or
            <see cref="T:DustInTheWind.RequestR.IUseCaseAsync`2"/>.
            </summary>
            <param name="assembly">The assembly to be searched.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects representing the use case classes.</returns>
        </member>
        <member name="M:DustInTheWind.RequestR.AssemblyExtensions.GetAllRequestValidators(System.Reflection.Assembly)">
            <summary>
            Enumerates all the types that implement the <see cref="T:DustInTheWind.RequestR.IRequestValidator`1"/> interface.
            </summary>
            <param name="assembly">The assembly to be searched.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects representing the request validator classes.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.DefaultUseCaseFactory">
            <summary>
            This default implementation uses the <see cref="T:System.Activator"/> class to create use case instances.
            As a result it can create only use cases that provide a parameterless constructor.
            </summary>
        </member>
        <member name="T:DustInTheWind.RequestR.IRequestValidator`1">
            <summary>
            Provides validation for the use case request of type <typeparamref name="TRequest"/>.
            </summary>
            <typeparam name="TRequest">The type of the request that is validated.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.IRequestValidator`1.Validate(`0)">
            <summary>
            Performs the validation of the use case request.
            If validation fails, an exception is thrown.
            </summary>
            <param name="request">The request instance that is being validated.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.IUseCase`1">
            <summary>
            Implements a use case that can handle a <typeparamref name="TRequest"/> object
            and returns nothing.
            </summary>
            <typeparam name="TRequest">The type of the request that can be handled by this use case.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.IUseCase`1.Execute(`0)">
            <summary>
            Executes the use case for the specified input data.
            </summary>
            <param name="request">The object containing the input data for the use case.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.IUseCase`2">
            <summary>
            Implements a use case that can handle a <typeparamref name="TRequest"/> object
            and returns a <typeparamref name="TResponse"/> object as response.
            </summary>
            <typeparam name="TRequest">The type of the request that can be handled by this use case.</typeparam>
            <typeparam name="TResponse">The type of the response that is returned by this use case.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.IUseCase`2.Execute(`0)">
            <summary>
            Executes the use case for the specified input data and returns the response.
            </summary>
            <param name="request">The object containing the input data for the use case.</param>
            <returns>The response to be returned to the caller.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.IUseCaseAsync`1">
            <summary>
            Implements a use case that can handle asynchronously a <typeparamref name="TRequest"/> object
            and returns nothing.
            </summary>
            <typeparam name="TRequest">The type of the request that can be handled by this use case.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.IUseCaseAsync`1.Execute(`0)">
            <summary>
            Asynchronously executes the use case for the specified input data.
            </summary>
            <param name="request">The object containing the input data for the use case.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous use case execution.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.IUseCaseAsync`2">
            <summary>
            Implements a use case that can handle asynchronously a <typeparamref name="TRequest"/> object
            and returns a <typeparamref name="TResponse"/> object as response.
            </summary>
            <typeparam name="TRequest">The type of the request that can be handled by this use case.</typeparam>
            <typeparam name="TResponse">The type of the response that is returned by this use case.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.IUseCaseAsync`2.Execute(`0)">
            <summary>
            Asynchronously executes the use case for the specified input data and returns the response.
            </summary>
            <param name="request">The object containing the input data for the use case.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous use case execution. The <see cref="P:System.Threading.Tasks.Task`1.Result"/> contains the use case's response.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.RequestBusExtensions">
            <summary>
            Contains extension methods for the <see cref="T:DustInTheWind.RequestR.RequestBus"/> type.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBusExtensions.RegisterAllUseCases(DustInTheWind.RequestR.RequestBus)">
            <summary>
            Searches all the assemblies from the current <see cref="T:System.AppDomain"/>
            and registers all the use case and validator classes.
            </summary>
            <param name="requestBus">The <see cref="T:DustInTheWind.RequestR.RequestBus"/> instance where to register the use cases and validators</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBusExtensions.RegisterAllUseCases(DustInTheWind.RequestR.RequestBus,System.Reflection.Assembly)">
            <summary>
            Searches the specified assembly and registers all the use case and validator classes.
            </summary>
            <param name="requestBus">The <see cref="T:DustInTheWind.RequestR.RequestBus"/> instance where to register the use cases and validators</param>
            <param name="assembly">The assembly to be searched.</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBusExtensions.RegisterAllUseCases(DustInTheWind.RequestR.RequestBus,System.Type)">
            <summary>
            Searches the assembly containing the specified type and registers all the use case and validator classes.
            </summary>
            <param name="requestBus">The <see cref="T:DustInTheWind.RequestR.RequestBus"/> instance where to register the use cases and validators</param>
            <param name="type">A <see cref="T:System.Type"/> instance contained by the assembly to be searched.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.UseCaseAlreadyRegisteredException">
            <summary>
            This exception is thrown by the <see cref="T:DustInTheWind.RequestR.RequestBus"/> when a second use case is registered
            for the same type of request.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.UseCaseAlreadyRegisteredException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.UseCaseAlreadyRegisteredException"/> class
            with the request type for which the use case is attempted to be registered.
            </summary>
            <param name="requestType">The type of the request for which the second use case was attempted to be registered.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.UseCaseFactoryBase">
            <summary>
            A factory class that creates instances of use cases.
            </summary>
        </member>
        <member name="T:DustInTheWind.RequestR.UseCaseNotFoundException">
            <summary>
            This exception is thrown by <see cref="T:DustInTheWind.RequestR.RequestBus"/> when no use case was registered
            for the specified request.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.UseCaseNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.UseCaseNotFoundException"/> class.
            </summary>
        </member>
        <member name="T:DustInTheWind.RequestR.ValidatorAlreadyRegisteredException">
            <summary>
            This exception is thrown by the <see cref="T:DustInTheWind.RequestR.RequestBus"/> when a second validator is registered
            for the same type of request.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.ValidatorAlreadyRegisteredException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.ValidatorAlreadyRegisteredException"/> class
            with the request type for which the validator is attempted to be registered.
            </summary>
            <param name="requestType">The type of the request for which the second validator was attempted to be registered.</param>
        </member>
    </members>
</doc>
