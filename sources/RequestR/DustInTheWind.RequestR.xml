<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DustInTheWind.RequestR</name>
    </assembly>
    <members>
        <member name="T:DustInTheWind.RequestR.AssemblyExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Reflection.Assembly"/> type.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.AssemblyExtensions.GetAllUseCasesAndRequestValidators(System.Reflection.Assembly)">
            <summary>
            Enumerates all the types that implement the one of the interfaces: <see cref="T:DustInTheWind.RequestR.IUseCase`1"/>,
            <see cref="T:DustInTheWind.RequestR.IUseCase`2"/> or <see cref="T:DustInTheWind.RequestR.IRequestValidator`1"/>.
            </summary>
            <param name="assembly">The assembly to be searched.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects representing the use case and request validator classes.</returns>
        </member>
        <member name="M:DustInTheWind.RequestR.AssemblyExtensions.GetAllUseCases(System.Reflection.Assembly)">
            <summary>
            Enumerates all the types that implement the one of the interfaces: <see cref="T:DustInTheWind.RequestR.IUseCase`1"/>,
            <see cref="T:DustInTheWind.RequestR.IUseCase`1"/>, <see cref="T:DustInTheWind.RequestR.IUseCase`1"/> or
            <see cref="T:DustInTheWind.RequestR.IUseCase`2"/>.
            </summary>
            <param name="assembly">The assembly to be searched.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects representing the use case classes.</returns>
        </member>
        <member name="M:DustInTheWind.RequestR.AssemblyExtensions.GetAllRequestValidators(System.Reflection.Assembly)">
            <summary>
            Enumerates all the types that implement the <see cref="T:DustInTheWind.RequestR.IRequestValidator`1"/> interface.
            </summary>
            <param name="assembly">The assembly to be searched.</param>
            <returns>An enumeration of <see cref="T:System.Type"/> objects representing the request validator classes.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.DefaultUseCaseFactory">
            <summary>
            This default implementation uses the <see cref="T:System.Activator"/> class to create use case instances.
            As a result it can create only use cases that provide a parameterless constructor.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.DefaultUseCaseFactory.CreateInternal(System.Type)">
            <summary>
            Creates a new instance of the specified use case type, using the <see cref="T:System.Activator"/> class.
            </summary>
            <param name="type">The type of the use case to be created.</param>
            <returns>A new instance of the specified use case.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.IRequestValidator`1">
            <summary>
            Provides validation for the use case request of type <typeparamref name="TRequest"/>.
            </summary>
            <typeparam name="TRequest">The type of the request that is validated.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.IRequestValidator`1.Validate(`0)">
            <summary>
            Performs the validation of the use case request.
            If validation fails, an exception is thrown.
            </summary>
            <param name="request">The request instance that is being validated.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.IUseCase`1">
            <summary>
            Implements a use case that can handle asynchronously a <typeparamref name="TRequest"/> object
            and returns nothing.
            </summary>
            <typeparam name="TRequest">The type of the request that can be handled by this use case.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.IUseCase`1.Execute(`0)">
            <summary>
            Asynchronously executes the use case for the specified input data.
            </summary>
            <param name="request">The object containing the input data for the use case.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous use case execution.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.IUseCase`2">
            <summary>
            Implements a use case that can handle asynchronously a <typeparamref name="TRequest"/> object
            and returns a <typeparamref name="TResponse"/> object as response.
            </summary>
            <typeparam name="TRequest">The type of the request that can be handled by this use case.</typeparam>
            <typeparam name="TResponse">The type of the response that is returned by this use case.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.IUseCase`2.Execute(`0)">
            <summary>
            Asynchronously executes the use case for the specified input data and returns the response.
            </summary>
            <param name="request">The object containing the input data for the use case.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous use case execution. The <see cref="P:System.Threading.Tasks.Task`1.Result"/> contains the use case's response.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.RequestBus">
            <summary>
            This is the service that received used to execute use cases based on received requests.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.RequestBus"/> class
            with a default implementation of the use case factory.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.#ctor(DustInTheWind.RequestR.UseCaseFactoryBase)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.RequestBus"/> class
            with a custom use case factory.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.RegisterUseCase``1">
            <summary>
            Adds a new use case type to the internal list of known use cases.
            Later, when a request is received, a use case type is peeked from this list, instantiated and executed.
            </summary>
            <typeparam name="TUseCase">The type of the use case to be added in the list.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.RegisterUseCase(System.Type)">
            <summary>
            Adds a new use case type to the internal list of known use cases.
            Later, when a request is received, a use case type is peeked from this list, instantiated and executed.
            </summary>
            <param name="useCaseType">The type of the use case to be added in the list.</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.RegisterValidator``1">
            <summary>
            Adds a new validator type to the internal list of known validators.
            Later, when a request is received, the corresponding validator is peeked from the list, instantiated and executed.
            </summary>
            <typeparam name="TValidator">The type of the validator to be added in the list.</typeparam>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.RegisterValidator(System.Type)">
            <summary>
            Adds a new validator type to the internal list of known validators.
            Later, when a request is received, the corresponding validator is peeked from the list, instantiated and executed.
            </summary>
            <param name="validatorType">The type of the validator to be added in the list.</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.Process``2(``0)">
            <summary>
            Searches a use case that can handle the specified request, executes it and returns the response.
            If a validator exists for the request, it is also executed before the use case.
            </summary>
            <typeparam name="TRequest">The type of the request object for which to execute the use case.</typeparam>
            <typeparam name="TResponse">The type of the response object that is returned to the caller.</typeparam>
            <param name="request">The request object for which to execute the use case.</param>
            <returns>The response object that is returned to the caller.</returns>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.Process``1(``0)">
            <summary>
            Searches a use case that can handle the specified request and executes it.
            If a validator exists for the request, it is also executed before the use case.
            </summary>
            <typeparam name="TRequest">The type of the request object for which to execute the use case.</typeparam>
            <param name="request">The request object for which to execute the use case.</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.ProcessAsync``2(``0)">
            <summary>
            Searches a use case that can handle the specified request, executes it asynchronously and returns the response.
            If a validator exists for the request, it is also executed before the use case.
            </summary>
            <typeparam name="TRequest">The type of the request object for which to execute the use case.</typeparam>
            <typeparam name="TResponse">The type of the response object that is returned to the caller.</typeparam>
            <param name="request">The request object for which to execute the use case.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous execution.
            At the end of the execution, the <see cref="P:System.Threading.Tasks.Task`1.Result"/> will contain the response object of the use case.
            </returns>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBus.ProcessAsync``1(``0)">
            <summary>
            Searches a use case that can handle the specified request and executes it asynchronously.
            If a validator exists for the request, it is also executed before the use case.
            </summary>
            <typeparam name="TRequest">The type of the request object for which to execute the use case.</typeparam>
            <param name="request">The request object for which to execute the use case.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous execution.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.RequestBusExtensions">
            <summary>
            Contains extension methods for the <see cref="T:DustInTheWind.RequestR.RequestBus"/> type.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBusExtensions.RegisterAllUseCases(DustInTheWind.RequestR.RequestBus)">
            <summary>
            Searches all the assemblies from the current <see cref="T:System.AppDomain"/>
            and registers all the use case and validator classes.
            </summary>
            <param name="requestBus">The <see cref="T:DustInTheWind.RequestR.RequestBus"/> instance where to register the use cases and validators</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBusExtensions.RegisterAllUseCases(DustInTheWind.RequestR.RequestBus,System.Reflection.Assembly)">
            <summary>
            Searches the specified assembly and registers all the use case and validator classes.
            </summary>
            <param name="requestBus">The <see cref="T:DustInTheWind.RequestR.RequestBus"/> instance where to register the use cases and validators</param>
            <param name="assembly">The assembly to be searched.</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestBusExtensions.RegisterAllUseCases(DustInTheWind.RequestR.RequestBus,System.Type)">
            <summary>
            Searches the assembly containing the specified type and registers all the use case and validator classes.
            </summary>
            <param name="requestBus">The <see cref="T:DustInTheWind.RequestR.RequestBus"/> instance where to register the use cases and validators</param>
            <param name="type">A <see cref="T:System.Type"/> instance contained by the assembly to be searched.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.RequestRException">
            <summary>
            The base exception thrown by the RequestR framework.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestRException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.RequestRException"/>
            with a default error message.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestRException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.RequestRException"/>
            with a custom error message.
            </summary>
            <param name="message">The message that described the encountered error.</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestRException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.RequestRException"/>
            with a custom error message an an inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that described the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="M:DustInTheWind.RequestR.RequestRException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.RequestRException"/>
            with serialized data.
            </summary>
        </member>
        <member name="T:DustInTheWind.RequestR.ResponseCastException">
            <summary>
            Exception thrown when the requested type is different from the actual type of the response
            and a cast cannot be performed.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.ResponseCastException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.ResponseCastException"/> class.
            </summary>
            <param name="actualResponseType">The type of the actual response.</param>
            <param name="requestedResponseType">The type requested to be returned.</param>
            <param name="inner">The exception that generated the current one.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.TypeIsNotUseCaseException">
            <summary>
            Exception thrown when the application needs a <see cref="T:System.Type"/> object that represents a use case,
            but it receives one that does not implement the use case interfaces.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.TypeIsNotUseCaseException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.TypeIsNotUseCaseException"/> class
            with the <see cref="T:System.Type"/> instance that is expected to represent a use case, but it doesn't.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> instance that is expected to represent a use case, but it doesn't.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.UnusableUseCaseException">
            <summary>
            Exception thrown when the use case found in the registered use cases list for the specified request
            cannot be used to handle the request.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.UnusableUseCaseException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.UnusableUseCaseException"/> class.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.UnusableUseCaseException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.UnusableUseCaseException"/> class.
            </summary>
            <param name="useCaseType">The type of the use case that cannot be used.</param>
            <param name="requestType">The type of the request for which the use case cannot be used.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.UseCaseAlreadyRegisteredException">
            <summary>
            This exception is thrown by the <see cref="T:DustInTheWind.RequestR.RequestBus"/> when a second use case is registered
            for the same type of request.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.UseCaseAlreadyRegisteredException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.UseCaseAlreadyRegisteredException"/> class
            with the request type for which the use case is attempted to be registered.
            </summary>
            <param name="requestType">The type of the request for which the second use case was attempted to be registered.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.UseCaseFactoryBase">
            <summary>
            A factory class that creates instances of use cases.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.UseCaseFactoryBase.Create(System.Type)">
            <summary>
            Creates a new instance of the specified use case type.
            The actual creation of the object is delegated to the inheritor class.
            See the <see cref="M:DustInTheWind.RequestR.UseCaseFactoryBase.CreateInternal(System.Type)"/> method.
            </summary>
            <param name="type">The type of the use case to be created.</param>
            <returns>A new instance of the specified use case.</returns>
        </member>
        <member name="M:DustInTheWind.RequestR.UseCaseFactoryBase.CreateInternal(System.Type)">
            <summary>
            When implemented by an inheritor, it creates a new instance of the specified use case.
            </summary>
            <param name="type">The type of the use case to be created.</param>
            <returns>A new instance of the specified use case.</returns>
        </member>
        <member name="T:DustInTheWind.RequestR.UseCaseInstantiateException">
            <summary>
            Exception thrown when the use case cannot be instantiated.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.UseCaseInstantiateException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.UseCaseInstantiateException"/> class
            with the use case type.
            </summary>
            <param name="useCaseType">The type of the use case class that could not be instantiated.</param>
        </member>
        <member name="M:DustInTheWind.RequestR.UseCaseInstantiateException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.UseCaseInstantiateException"/> class
            with the use case type.
            </summary>
            <param name="useCaseType">The type of the use case class that could not be instantiated.</param>
            <param name="requestType">The type of the request class for which the use case creation was attempted.</param>
        </member>
        <member name="T:DustInTheWind.RequestR.UseCaseNotFoundException">
            <summary>
            This exception is thrown by <see cref="T:DustInTheWind.RequestR.RequestBus"/> when no use case was registered
            for the specified request.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.UseCaseNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.UseCaseNotFoundException"/> class.
            </summary>
        </member>
        <member name="T:DustInTheWind.RequestR.ValidatorAlreadyRegisteredException">
            <summary>
            This exception is thrown by the <see cref="T:DustInTheWind.RequestR.RequestBus"/> when a second validator is registered
            for the same type of request.
            </summary>
        </member>
        <member name="M:DustInTheWind.RequestR.ValidatorAlreadyRegisteredException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DustInTheWind.RequestR.ValidatorAlreadyRegisteredException"/> class
            with the request type for which the validator is attempted to be registered.
            </summary>
            <param name="requestType">The type of the request for which the second validator was attempted to be registered.</param>
        </member>
    </members>
</doc>
